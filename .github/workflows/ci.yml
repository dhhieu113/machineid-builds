name: CI - CMake build matrix

on:
  push:
    branches: [ master, main ]
    tags:
      - 'v*'   # triggers on v0.0.1, v1.0.0, v2.3.4 etc.
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build_type: [Release]
        # optionally add compiler matrix entries if you want more coverage
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get submodules (if any)
        run: git submodule update --init --recursive

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1
        with:
          cmake-version: '3.26.0' # adjust if needed

      - name: Configure (CMake)
        # Use a cross-platform invokation â€” CMake chooses default generator on each runner
        run: |
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..

      - name: Build (CMake)
        run: |
          cd build
          cmake --build . --config ${{ matrix.build_type }} --parallel

      - name: Run tests (ctest) if present
        run: |
          cd build
          if [ -f CTestTestfile.cmake ] ; then
            ctest --output-on-failure -C ${{ matrix.build_type }}
          else
            echo "No tests configured (no CTestTestfile.cmake found)."
          fi
        shell: bash
        
      - name: Collect build artifacts
        run: |
          mkdir -p artifacts
          cp build/**/*.a artifacts/ || true
          cp build/**/*.so* artifacts/ || true
          cp build/**/*.dylib artifacts/ || true
          cp build/**/*.lib artifacts/ || true
          cp build/**/*.dll artifacts/ || true
          ls -la artifacts || echo "No artifacts found"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: machineid-${{ matrix.os }}-${{ matrix.build_type }}
          path: |
            build/**/*.dll
            build/**/*.lib
            build/**/*.exe
            build/**/*.a
            build/**/*.so
            build/**/*.dylib
            
  release:
    if: startsWith(github.ref, 'refs/tags/v')   # only run on tag
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*
          overwrite: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
