name: CI - MachineId Build multi-platform

on:
  push:
    branches: [ master, main ]
    tags:
      - 'v*'   # triggers on v0.0.1, v1.0.0, v2.3.4 etc.
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build_type: [Release]
        # optionally add compiler matrix entries if you want more coverage
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get submodules (if any)
        run: git submodule update --init --recursive

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1
        with:
          cmake-version: '3.26.0' # adjust if needed

      - name: Configure (CMake)
        # Use a cross-platform invokation — CMake chooses default generator on each runner
        run: |
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..

      - name: Build (CMake)
        run: |
          cd build
          cmake --build . --config ${{ matrix.build_type }} --parallel

      - name: Run tests (ctest) if present
        run: |
          cd build
          if [ -f CTestTestfile.cmake ] ; then
            ctest --output-on-failure -C ${{ matrix.build_type }}
          else
            echo "No tests configured (no CTestTestfile.cmake found)."
          fi
        shell: bash
        
      - name: Collect build artifacts
        run: |
           mkdir -p artifacts
            # Try to copy, ignore if not found
            cp build/**/*.a artifacts/ 2>/dev/null || true
            cp build/**/*.so* artifacts/ 2>/dev/null || true
            cp build/**/*.dylib artifacts/ 2>/dev/null || true
            cp build/**/*.lib artifacts/ 2>/dev/null || true
            cp build/**/*.dll artifacts/ 2>/dev/null || true
  
            # Rename per OS only if we have files
            if [ "$(ls -A artifacts)" ]; then
              for f in artifacts/*; do
                base=$(basename "$f")
                case "${{ matrix.os }}" in
                  ubuntu-latest) new="linux-$base" ;;
                  macos-latest)  new="macos-$base" ;;
                  windows-latest) new="windows-$base" ;;
                esac
                mv "$f" "artifacts/$new"
              done
            else
              echo "⚠️ No build outputs found in build/"
            fi
  
            echo "Artifacts collected:"
            ls -la artifacts || true
        shell: bash

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: machineid-${{ matrix.os }}-${{ matrix.build_type }}
          path: |
            build/**/*.dll
            build/**/*.lib
            build/**/*.exe
            build/**/*.a
            build/**/*.so
            build/**/*.dylib
            
  release:
    if: startsWith(github.ref, 'refs/tags/v')   # only run on tag
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
  
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*
          fail_on_unmatched_files: true
          override: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-dotnet:
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: Download CMake build artifacts
        uses: actions/download-artifact@v4
        with:
          path: bin/Release

      - name: Organize native libraries (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # Create directory structure for native libraries
          mkdir -p bin/Release/x64
          mkdir -p bin/Release/x86
          
          # Move the Windows artifacts to appropriate folders
          if (Test-Path "bin/Release/machineid-windows-latest-Release/build/*/machineid_dotnet.dll") {
            $x64Path = Get-ChildItem -Path "bin/Release/machineid-windows-latest-Release/build" -Recurse -Filter "machineid_dotnet.dll" | Where-Object { $_.FullName -like "*x64*" } | Select-Object -First 1
            $x86Path = Get-ChildItem -Path "bin/Release/machineid-windows-latest-Release/build" -Recurse -Filter "machineid_dotnet.dll" | Where-Object { $_.FullName -like "*Win32*" -or $_.FullName -like "*x86*" } | Select-Object -First 1
            
            if ($x64Path) {
              Copy-Item -Path $x64Path.FullName -Destination "bin/Release/x64/"
            } else {
              Write-Warning "x64 library not found"
            }
            
            if ($x86Path) {
              Copy-Item -Path $x86Path.FullName -Destination "bin/Release/x86/"
            } else {
              Write-Warning "x86 library not found"
            }
          } else {
            Write-Warning "No machineid_dotnet.dll files found in artifacts"
          }
        shell: pwsh

      - name: Organize native libraries (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Create directory structure for native libraries
          mkdir -p bin/Release/linux-x64
          
          # Move the Linux artifacts to appropriate folders
          find bin/Release/machineid-ubuntu-latest-Release -name "*.so" -type f -exec cp {} bin/Release/linux-x64/ \;
        shell: bash

      - name: Organize native libraries (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # Create directory structure for native libraries
          mkdir -p bin/Release/osx-x64
          
          # Move the macOS artifacts to appropriate folders
          find bin/Release/machineid-macos-latest-Release -name "*.dylib" -type f -exec cp {} bin/Release/osx-x64/ \;
        shell: bash

      - name: Build .NET package
        run: |
          dotnet restore dotnet/MachineId.csproj
          dotnet build dotnet/MachineId.csproj --configuration Release --no-restore
        
      - name: Pack NuGet package (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # Extract version from tag if it exists
          if ("${{ github.ref }}".StartsWith('refs/tags/v')) {
            $version = "${{ github.ref }}".Substring(11)  # Remove 'refs/tags/v' prefix
            dotnet pack dotnet/MachineId.csproj --configuration Release --no-build -p:Version=$version -p:PackageId="Dhhieu113.MachineId" --output nupkgs
          } else {
            dotnet pack dotnet/MachineId.csproj --configuration Release --no-build -p:PackageId="Dhhieu113.MachineId-win" --output nupkgs
          }
        shell: pwsh
      
      - name: Pack NuGet package (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Extract version from tag if it exists
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            version=$(echo ${{ github.ref }} | sed 's|refs/tags/v||')
            dotnet pack dotnet/MachineId.csproj --configuration Release --no-build -p:Version=$version -p:PackageId="Dhhieu113.MachineId" --output nupkgs
          else
            dotnet pack dotnet/MachineId.csproj --configuration Release --no-build -p:PackageId="Dhhieu113.MachineId-linux" --output nupkgs
          fi
        shell: bash
        
      - name: Pack NuGet package (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # Extract version from tag if it exists
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            version=$(echo ${{ github.ref }} | sed 's|refs/tags/v||')
            dotnet pack dotnet/MachineId.csproj --configuration Release --no-build -p:Version=$version -p:PackageId="Dhhieu113.MachineId" --output nupkgs
          else
            dotnet pack dotnet/MachineId.csproj --configuration Release --no-build -p:PackageId="Dhhieu113.MachineId-macos" --output nupkgs
          fi
        shell: bash

      - name: Upload NuGet package artifact
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages-${{ matrix.os }}
          path: nupkgs/*.nupkg

  publish-nuget:
    if: startsWith(github.ref, 'refs/tags/v')   # only run on tag
    needs: build-dotnet
    runs-on: windows-latest  # Windows for merging packages
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'
      
      - name: Download all NuGet packages
        uses: actions/download-artifact@v4
        with:
          pattern: nuget-packages-*
          path: all-nupkgs
          merge-multiple: true
          
      - name: List downloaded packages
        run: |
          dir all-nupkgs -Recurse
        shell: pwsh
      
      - name: Create merged NuGet package
        run: |
          # Extract version from tag
          $version = ""
          if ("${{ github.ref }}".StartsWith('refs/tags/v')) {
            $version = "${{ github.ref }}".Substring(11)  # Remove 'refs/tags/v' prefix
          } else {
            $version = "1.0.0-dev"  # Default version if not a tag
          }
          
          # Create temp dirs for each package
          New-Item -Path "temp" -ItemType Directory -Force
          New-Item -Path "merged" -ItemType Directory -Force
          
          # Get the nupkg file (should be the same name on all platforms)
          $nupkgFiles = Get-ChildItem -Path "all-nupkgs" -Filter "*.nupkg" -Recurse
          if ($nupkgFiles.Count -eq 0) {
            Write-Error "No NuGet packages found!"
            exit 1
          }
          
          # Use the Windows package as base and extract it
          $basePackage = $nupkgFiles | Where-Object { $_.FullName -like "*windows*" -or $_.FullName -like "*win*" } | Select-Object -First 1
          if (-not $basePackage) {
            $basePackage = $nupkgFiles[0]
          }
          
          Write-Host "Using base package: $($basePackage.FullName)"
          
          # Extract all packages
          foreach ($nupkg in $nupkgFiles) {
            $extractDir = "temp/$($nupkg.BaseName)"
            New-Item -Path $extractDir -ItemType Directory -Force
            Write-Host "Extracting $($nupkg.FullName) to $extractDir"
            Expand-Archive -Path $nupkg.FullName -DestinationPath $extractDir -Force
          }
          
          # Copy all extracted content to the merged folder
          $baseExtractDir = "temp/$($basePackage.BaseName)"
          Write-Host "Copying base content from $baseExtractDir to merged/"
          Copy-Item -Path "$baseExtractDir/*" -Destination "merged/" -Recurse -Force
          
          # Copy runtime folders from other packages
          foreach ($extractDir in (Get-ChildItem -Path "temp" -Directory)) {
            if ($extractDir.Name -ne $basePackage.BaseName) {
              $runtimesDir = Join-Path $extractDir.FullName "runtimes"
              if (Test-Path $runtimesDir) {
                foreach ($runtimeFolder in (Get-ChildItem -Path $runtimesDir -Directory)) {
                  $targetPath = "merged/runtimes/$($runtimeFolder.Name)"
                  if (-not (Test-Path $targetPath)) {
                    Write-Host "Copying runtime folder $($runtimeFolder.FullName) to $targetPath"
                    Copy-Item -Path $runtimeFolder.FullName -Destination "merged/runtimes/" -Recurse -Force
                  }
                }
              }
            }
          }
          
          # Create the final package
          Write-Host "Creating final merged package as Dhhieu113.MachineId.$version.nupkg"
          Compress-Archive -Path "merged/*" -DestinationPath "merged-package.zip" -Force
          Rename-Item -Path "merged-package.zip" -NewName "Dhhieu113.MachineId.$version.nupkg"
        shell: pwsh
      
      - name: Upload merged NuGet package
        uses: actions/upload-artifact@v4
        with:
          name: merged-nuget-package
          path: Dhhieu113.MachineId.*.nupkg

      - name: Publish NuGet package
        run: |
          dotnet nuget push Dhhieu113.MachineId.*.nupkg --api-key $env:NUGET_API_KEY --source https://api.nuget.org/v3/index.json
        shell: pwsh
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
