name: CI - MachineId Build multi-platform

on:
  push:
    branches: [ master, main ]
    tags:
      - 'v*'   # triggers on v0.0.1, v1.0.0, v2.3.4 etc.
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

# Add default permissions to the workflow
permissions:
  contents: write   # Needed for creating releases
  packages: write   # Needed for publishing packages

jobs:
  build-native:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-24.04
            rid: linux-x64
          - os: macos-14  # M1/M2 ARM64 runners
            rid: osx-x64
          - os: macos-13  # Intel x64 runners
            rid: osx-x64
          - os: windows-2022
            rid: win-x64
        build_type: [Release]
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get submodules (if any)
        run: git submodule update --init --recursive

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1
        with:
          cmake-version: '3.26.0'

      - name: Configure (CMake)
        run: |
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..

      - name: Build (CMake)
        run: |
          cd build
          cmake --build . --config ${{ matrix.build_type }} --parallel

      - name: Run tests (ctest) if present
        run: |
          cd build
          if [ -f CTestTestfile.cmake ] ; then
            ctest --output-on-failure -C ${{ matrix.build_type }}
          else
            echo "No tests configured (no CTestTestfile.cmake found)."
          fi
        shell: bash
        
      - name: Collect build artifacts
        run: |
          mkdir -p artifacts
          
          # Use the RID from the matrix
          RID="${{ matrix.rid }}"
          
          # Create runtime-specific directory
          mkdir -p "artifacts/runtimes/$RID/native"
          
          # Copy native libraries to the correct runtime folder
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            find build -name "*.dll" -type f -exec cp {} "artifacts/runtimes/$RID/native/" \; 2>/dev/null || true
            find build -name "*.lib" -type f -exec cp {} "artifacts/runtimes/$RID/native/" \; 2>/dev/null || true
          elif [[ "${{ runner.os }}" == "Linux" ]]; then
            find build -name "*.so*" -type f -exec cp {} "artifacts/runtimes/$RID/native/" \; 2>/dev/null || true
            find build -name "*.a" -type f -exec cp {} "artifacts/runtimes/$RID/native/" \; 2>/dev/null || true
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            find build -name "*.dylib" -type f -exec cp {} "artifacts/runtimes/$RID/native/" \; 2>/dev/null || true
            find build -name "*.a" -type f -exec cp {} "artifacts/runtimes/$RID/native/" \; 2>/dev/null || true
          fi
          
          echo "Artifacts collected for $RID:"
          ls -la "artifacts/runtimes/$RID/native/" || echo "No native libraries found"
        shell: bash

      - name: Upload native libraries
        uses: actions/upload-artifact@v4
        with:
          name: native-${{ matrix.os }}
          path: artifacts/runtimes/

  build-nuget:
    needs: build-native
    runs-on: ubuntu-24.04  # Use specific Ubuntu version
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: Download all native libraries
        uses: actions/download-artifact@v4
        with:
          pattern: native-*
          path: native-libs

      - name: Organize native libraries for NuGet
        run: |
          # Create the runtimes directory structure
          mkdir -p bin/Release/runtimes
          
          # Debug: Show what we downloaded
          echo "=== Downloaded artifacts structure ==="
          find native-libs -type f -name "*" 2>/dev/null | sort || echo "No files found in native-libs"
          
          # Move native libraries to the correct location
          for os_dir in native-libs/native-*; do
            if [ -d "$os_dir" ]; then
              echo "Processing $os_dir"
              if [ -d "$os_dir/runtimes" ]; then
                echo "Found runtimes directory in $os_dir"
                # Use cp -R to preserve structure
                cp -R "$os_dir/runtimes/"* bin/Release/runtimes/ 2>/dev/null || true
              else
                echo "Warning: No runtimes directory in $os_dir"
              fi
            fi
          done
          
          # Verify the structure
          echo "=== Final runtimes structure ==="
          if [ -d "bin/Release/runtimes" ]; then
            find bin/Release/runtimes -type f | sort
          else
            echo "Error: No runtimes directory created!"
          fi
          
          # Check that we have libraries for all platforms
          echo "=== Platform verification ==="
          MISSING_PLATFORMS=""
          for rid in linux-x64 osx-x64 win-x64; do
            if [ -d "bin/Release/runtimes/$rid/native" ]; then
              echo "✅ Found native libraries for $rid:"
              ls -la "bin/Release/runtimes/$rid/native/" | head -5
            else
              echo "⚠️ Missing native libraries for $rid"
              MISSING_PLATFORMS="$MISSING_PLATFORMS $rid"
            fi
          done
          
          if [ -n "$MISSING_PLATFORMS" ]; then
            echo "Warning: Missing platforms:$MISSING_PLATFORMS"
            echo "Continuing anyway for partial platform support..."
          fi
        shell: bash

      - name: Build .NET project
        run: |
          dotnet restore dotnet/MachineId.csproj
          dotnet build dotnet/MachineId.csproj --configuration Release --no-restore

      - name: Pack NuGet package
        run: |
          # Extract version from tag if it exists
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=$(echo "${{ github.ref }}" | sed 's|refs/tags/v||')
            echo "Building version $VERSION from tag"
          else
            # Use a pre-release version for non-tagged builds
            COMMIT_SHORT=$(git rev-parse --short HEAD)
            VERSION="1.0.0-dev.$COMMIT_SHORT"
            echo "Building development version $VERSION"
          fi
          
          echo "Version to pack: $VERSION"
          
          # Ensure the .csproj includes the native libraries
          # Check if the project file has the necessary includes
          if ! grep -q "runtimes" dotnet/MachineId.csproj; then
            echo "Warning: MachineId.csproj might not include runtime files. Adding them..."
            
            # Create a Directory.Build.props file to include the native libraries
            cat > dotnet/Directory.Build.props << 'EOF'
          <Project>
            <ItemGroup>
              <None Include="../bin/Release/runtimes/**/*" Pack="true" PackagePath="runtimes" />
            </ItemGroup>
          </Project>
          EOF
          fi
          
          # Pack the NuGet package with all native libraries
          dotnet pack dotnet/MachineId.csproj \
            --configuration Release \
            --no-build \
            -p:Version=$VERSION \
            -p:PackageId="Dhhieu113.MachineId" \
            -p:IncludeBuildOutput=true \
            --output nupkgs
          
          # Verify the package was created
          if [ ! -f "nupkgs/Dhhieu113.MachineId.$VERSION.nupkg" ]; then
            echo "Error: Package was not created!"
            ls -la nupkgs/
            exit 1
          fi
          
          echo "=== NuGet package created ==="
          ls -la nupkgs/
          
          # Extract and inspect the package structure
          echo "=== Package contents ==="
          unzip -l "nupkgs/Dhhieu113.MachineId.$VERSION.nupkg" | grep -E "(runtimes|native)" | head -20
          
          # Verify package has runtime files
          if ! unzip -l "nupkgs/Dhhieu113.MachineId.$VERSION.nupkg" | grep -q "runtimes"; then
            echo "Warning: Package might not contain runtime files!"
          else
            echo "✅ Package contains runtime files"
          fi
        shell: bash

      - name: Upload NuGet package
        uses: actions/upload-artifact@v4
        with:
          name: nuget-package
          path: nupkgs/*.nupkg

  test-nuget:
    needs: build-nuget
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-24.04, macos-14, windows-2022]
    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: Download NuGet package
        uses: actions/download-artifact@v4
        with:
          name: nuget-package
          path: test-package

      - name: Test NuGet package installation
        run: |
          # Create a test project
          mkdir test-project
          cd test-project
          dotnet new console
          
          # Find the package file
          PACKAGE_FILE=$(find ../test-package -name "*.nupkg" -type f | head -1)
          if [ -z "$PACKAGE_FILE" ]; then
            echo "Error: No NuGet package found!"
            exit 1
          fi
          
          # Extract package name and version from filename
          PACKAGE_FILENAME=$(basename "$PACKAGE_FILE")
          echo "Found package: $PACKAGE_FILENAME"
          
          # Extract package ID and version (handles both release and pre-release versions)
          # Format: Dhhieu113.MachineId.1.0.0.nupkg or Dhhieu113.MachineId.1.0.0-dev.abc123.nupkg
          PACKAGE_ID="Dhhieu113.MachineId"
          PACKAGE_VERSION=$(echo "$PACKAGE_FILENAME" | sed "s/${PACKAGE_ID}\.\(.*\)\.nupkg/\1/")
          
          echo "Package ID: $PACKAGE_ID"
          echo "Package Version: $PACKAGE_VERSION"
          
          # Add the local package source (using absolute path)
          PACKAGE_SOURCE=$(cd ../test-package && pwd)
          echo "Adding package source: $PACKAGE_SOURCE"
          
          # Create a local nuget.config to avoid conflicts
          cat > nuget.config << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <packageSources>
              <clear />
              <add key="nuget.org" value="https://api.nuget.org/v3/index.json" />
              <add key="local-test" value="$PACKAGE_SOURCE" />
            </packageSources>
          </configuration>
          EOF
          
          # Install the specific version of the package
          dotnet add package "$PACKAGE_ID" --version "$PACKAGE_VERSION" --source "$PACKAGE_SOURCE"
          
          # Create a simple test program that uses the library
          cat > Program.cs << 'EOF'
          using System;
          
          class Program
          {
              static void Main()
              {
                  Console.WriteLine("Testing MachineId package...");
                  // Add a simple test if your library has a public API
                  // For example: var id = MachineId.GetMachineId();
                  Console.WriteLine("Package loaded successfully!");
              }
          }
          EOF
          
          # Build the test project to ensure package works
          dotnet build --configuration Release
          
          # Run the test project
          dotnet run --configuration Release
          
          echo "✅ Package successfully installed, built, and ran on ${{ matrix.os }}"
        shell: bash

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-native, test-nuget]
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    steps:
      - name: Download all native libraries
        uses: actions/download-artifact@v4
        with:
          pattern: native-*
          path: native-artifacts
          
      - name: Download NuGet package
        uses: actions/download-artifact@v4
        with:
          name: nuget-package
          path: nuget-artifacts
          
      - name: Prepare release artifacts
        run: |
          mkdir -p release-artifacts
          
          # Create platform-specific archives for native libraries
          for os_dir in native-artifacts/native-*; do
            os_name=$(basename "$os_dir" | sed 's/native-//')
            
            # Map OS runner names to platform identifiers
            case "$os_name" in
              ubuntu-24.04) 
                platform="linux-x64"
                ext="tar.gz"
                ;;
              macos-14|macos-13)  
                platform="osx-x64"
                ext="tar.gz"
                ;;
              windows-2022) 
                platform="win-x64"
                ext="zip"
                ;;
              *)
                echo "Unknown OS: $os_name"
                continue
                ;;
            esac
            
            if [ -d "$os_dir/runtimes" ]; then
              echo "Creating archive for $platform"
              if [[ "$ext" == "tar.gz" ]]; then
                tar -czf "release-artifacts/machineid-native-$platform.$ext" -C "$os_dir/runtimes/$platform" native/
              else
                (cd "$os_dir/runtimes/$platform" && zip -r "../../../release-artifacts/machineid-native-$platform.$ext" native/)
              fi
            fi
          done
          
          # Copy NuGet package
          cp nuget-artifacts/*.nupkg release-artifacts/
          
          echo "Release artifacts:"
          ls -la release-artifacts/
        shell: bash
  
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "release-artifacts/*"
          allowUpdates: true
          replacesArtifacts: true
          generateReleaseNotes: true
          body: |
            ## 📦 Installation
            
            ### NuGet Package
            ```bash
            dotnet add package Dhhieu113.MachineId
            ```
            
            ### Native Libraries
            Platform-specific native libraries are available as separate downloads if needed.
            
            ## 🎯 Supported Platforms
            - Windows (x64)
            - Linux (x64)
            - macOS (x64)
        env:
          GITHUB_TOKEN: ${{ github.token }}

  publish-nuget:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [test-nuget, release]
    runs-on: ubuntu-24.04
    steps:
      - name: Download NuGet package
        uses: actions/download-artifact@v4
        with:
          name: nuget-package
          path: nupkgs
          
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'
      
      - name: Publish to NuGet.org
        run: |
          # List available packages
          echo "Publishing packages:"
          ls -la nupkgs/
          
          # Publish each package (should be just one)
          for package in nupkgs/*.nupkg; do
            echo "Publishing $(basename $package)..."
            dotnet nuget push "$package" \
              --api-key "$NUGET_API_KEY" \
              --source https://api.nuget.org/v3/index.json \
              --skip-duplicate
          done
        shell: bash
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
